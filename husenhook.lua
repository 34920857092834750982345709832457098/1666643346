do local ffi=require("ffi");local vector=require("vector");local lp=entity.get_local_player;local find_material=materialsystem.find_material;local engine_client=ffi.cast(ffi.typeof("void***"),client.create_interface("engine.dll","VEngineClient014"));local console_is_visible=ffi.cast(ffi.typeof("bool(__thiscall*)(void*)"),engine_client[0][11]);local ui_get=ui.get;local ui_set=ui.set;local ui_set_visible=ui.set_visible;local console_cmd=client.exec;local plist_set,plist_get=plist.set,plist.get;local getplayer=entity.get_players;local entity_is_enemy=entity.is_enemy;local entity_get_prop=entity.get_prop;local renderer_text=renderer.text;local w2s=renderer.world_to_screen;local line=renderer.line;math.pulse=function() return (math.clamp(((math.floor((math.sin(globals.curtime() * 2 ) * 220) + 221 ))/900) * 6.92 ,0,1) * 235) + 20 ;end;math.clamp=function(num,m,mx) return math.min(math.max(num,m),mx);end;white="\aFFFFFFFF_____________";pink="\aF4AAB9FF_____________";blue="\a60CFFAFF_____________";husenhook_label=ui.new_label("LUA","A","\aFFFFFFFF                         "   .. "\aFF0000FFH"   .. "\aFF5F00FFU"   .. "\aFFBF00FFS"   .. "\a9FFF00FFE"   .. "\a00FF00FFN"   .. "\a00FF9FFFH"   .. "\a006FFFFO"   .. "\a8000FFFFO"   .. "\aEE82EEFFK" );function hsv_to_rgb(h,s,v) h=h%1 ;local r,g,b;local i=math.floor(h * 6 );local f=(h * 6) -i ;local p=v * (1 -s) ;local q=v * (1 -(f * s)) ;local t=v * (1 -((1 -f) * s)) ;i=i%6 ;if (i==0) then r,g,b=v,t,p;elseif (i==1) then r,g,b=q,v,p;elseif (i==2) then r,g,b=p,v,t;elseif (i==3) then r,g,b=p,q,v;elseif (i==4) then r,g,b=t,p,v;elseif (i==5) then r,g,b=v,p,q;end return math.floor(r * 255 ),math.floor(g * 255 ),math.floor(b * 255 );end labelphase=0;client.set_event_callback("paint_ui",function() labelphase=(labelphase + (0.005 * ui.get(husenhook_speed)))%1 ;local letters={"H","U","S","E","N","H","O","O","K"};local text="\aFFFFFFFF                        ";for i=1, #letters do local r,g,b=hsv_to_rgb((labelphase + (i/ #letters))%1 ,1,1);text=text   .. string.format("\a%02X%02X%02XFF%s",r,g,b,letters[i]) ;end ui.set(husenhook_label,text);end);local husenlabel=ui.new_label("LUA","A",blue   .. pink   .. white );local section_select=ui.new_combobox("LUA","A","\aFFFFFFFFPanel",{"\aFFFFFFFFHome","\aFFFFFFFFRage","\aFFFFFFFFVisuals","\aFFFFFFFFMisc"});husenhook_speed=ui.new_slider("LUA","B","\aFFFFFFFFHusenhook Label Speed",1,5,1,true);rage_sep_top=ui.new_label("LUA","B",blue   .. pink   .. white );local config={enabled=ui.new_checkbox("LUA","B","\aFFFFFFFFEnable Resolver"),presets=ui.new_combobox("LUA","B","\aFFFFFFFFPresets",{"\aFFFFFFFFHvH","\aFFFFFFFFMaximum","\aFFFFFFFFBalanced"}),mode=ui.new_combobox("LUA","B","\aFFFFFFFFResolver Mode",{"\aFFFFFFFFSmart","\aFFFFFFFFAggressive","\aFFFFFFFFAdaptive","\aFFFFFFFFBrute","\aFFFFFFFFDelta","\aFFFFFFFFWeighted"}),defensive=ui.new_checkbox("LUA","B","\aFFFFFFFFEnable Defensive Resolver"),strength=ui.new_slider("LUA","B","\aFFFFFFFFResolver Strength",0,100,85,true,"%",1),history_size=ui.new_slider("LUA","B","\aFFFFFFFFHistory Size",4,64,24,true,"samples",4),safety=ui.new_slider("LUA","B","\aFFFFFFFFSafety Level",0,100,50,true,"%",1),lby_pred=ui.new_checkbox("LUA","B","\aFFFFFFFFLBY Prediction"),edge_detect=ui.new_checkbox("LUA","B","\aFFFFFFFFEdge Detection"),freestand=ui.new_checkbox("LUA","B","\aFFFFFFFFFreestand Analysis"),adaptive_brute=ui.new_checkbox("LUA","B","\aFFFFFFFFAdaptive Bruteforce"),shot_validate=ui.new_checkbox("LUA","B","\aFFFFFFFFShot Validation"),jitter_detect=ui.new_checkbox("LUA","B","\aFFFFFFFFJitter Detection"),anim_analysis=ui.new_checkbox("LUA","B","\aFFFFFFFFAnimation Analysis"),bone_analysis=ui.new_checkbox("LUA","B","\aFFFFFFFFBone Matrix Analysis"),resoindicators=ui.new_checkbox("LUA","B","\aFFFFFFFFDraw Indicators"),logs=ui.new_checkbox("LUA","B","\aFFFFFFFFResolver Logs"),hitlogs=ui.new_checkbox("LUA","B","\aFFFFFFFFHit Logs"),hud_x=ui.new_slider("LUA","B","\aFFFFFFFFHUD X Position",0,1920,10,true,"px"),hud_y=ui.new_slider("LUA","B","\aFFFFFFFFHUD Y Position",0,1080,10,true,"px"),debug=ui.new_checkbox("LUA","B","\aFFFFFFFFDebug Info")};local enemy_data={};local resolver_log={};local hit_log={};local cache={};local last_cleanup=0;local model={weights={},confidence={},learning_rate=0.05};local patterns={{ -35,35},{ -58,58},{ -29,29},{ -180,0,180}};local cheat_patterns={OTC={{35, -35},{58, -58}},Skeet={{ -60,60,180,0},{60, -60,0}},Fatality={{29, -29},{32, -32}}};rage_sep_bottom=ui.new_label("LUA","B",blue   .. pink   .. white );local spacer="                       ";local textbar="\a373737FF‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾";visuals_sep_top=ui.new_label("LUA","B",blue   .. pink   .. white );local indictopspacer=ui.new_label("LUA","B",spacer);local indictext=ui.new_label("LUA","B","\aFFFFFFFF\v•\r   Indicators");local indicatorbar=ui.new_label("LUA","B",textbar);local accentt={accent_label=ui.new_label("LUA","B","Accent Color"),accent_color=ui.new_color_picker("LUA","B","Accent Color",109,182,255,255)};local indicator_table={toggle=ui.new_checkbox("LUA","B","\aFFFFFFFFCrosshair Indicators")};local debugbox={debugtoggle=ui.new_checkbox("LUA","B","\aFFFFFFFFDebug Box")};local funtopspacer=ui.new_label("LUA","B",spacer);local funtext=ui.new_label("LUA","B","\aFFFFFFFF\v•\r   Fun");local funbar=ui.new_label("LUA","B",textbar);local china={enable=ui.new_checkbox("LUA","B","\aFF3C3CFFC\aFFCC00FFH\aFF3C3CFFI\aFFCC00FFN\aFF3C3CFFA \aFFFFFFFFHAT",true),color=ui.new_color_picker("LUA","B","Color",255,255,255),gradient=ui.new_checkbox("LUA","B","\aFFFFFFFFRainbow Gradient"),speed=ui.new_slider("LUA","B","\aFFFFFFFFSpeed \n China",1,10,5),thirdperson={ui.reference("Visuals","Effects","Force third person (alive)")}};local customizationtopspacer=ui.new_label("LUA","B",spacer);local customizationtext=ui.new_label("LUA","B","\aFFFFFFFF\v•\r   Customization");local customizationbar=ui.new_label("LUA","B",textbar);local vgui_recolor={label=ui.new_label("LUA","B","\aFFFFFFFFVGUI Color"),color_picker=ui.new_color_picker("LUA","B","VGUI Color picker",109,182,255,190)};local visuals_sep_bottom=ui.new_label("LUA","B",blue   .. pink   .. white );local misc_sep_top=ui.new_label("LUA","B",blue   .. pink   .. white );local clantag={ref=ui.new_combobox("LUA","B","\aFFFFFFFF\v\r  ClanTag",{"\aFFFFFFFFDisabled","\aFFFFFFFFhusenhook","\aFFFFFFFFgribcheat","\aFFFFFFFFdrownhack"}),map={["\aFFFFFFFFDisabled"]="Disabled",["\aFFFFFFFFhusenhook"]="husenhook",["\aFFFFFFFFgribcheat"]="gribcheat",["\aFFFFFFFFdrownhack"]="drownhack"},animate=ui.new_checkbox("LUA","B","\aFFFFFFFFAnimate Tag")};local killsay={enabled=ui.new_checkbox("LUA","B","\aFFFFFFFF \v\r  \aFF0000FFKill\aFFFFFFFFsay"),phrase=ui.new_combobox("LUA","B","\aFFFFFFFFKillsay Phrases",{"\aFFFFFFFFNormal","\aFF0000FFG\aFFFF00FFa\a00FF00FFy (\a0000FFFFG\a4B0082FFr\a9400D3FFi\aFF1493FFb)"})};local primary_weapons={"-","\aFFFFFFFFAWP","\aFFFFFFFFSCAR20/G3SG1","\aFFFFFFFFScout","\aFFFFFFFFM4/AK47","\aFFFFFFFFFamas/Galil","\aFFFFFFFFAug/SG553","\aFFFFFFFFM249/Negev","\aFFFFFFFFMag7/SawedOff","\aFFFFFFFFNova","\aFFFFFFFFXM1014","\aFFFFFFFFMP9/Mac10","\aFFFFFFFFUMP45","\aFFFFFFFFPPBizon","\aFFFFFFFFMP7"};local secondary_weapons={"-","\aFFFFFFFFCZ75/Tec9/FiveSeven","\aFFFFFFFFP250","\aFFFFFFFFDeagle/Revolver","\aFFFFFFFFDualies"};local grenades={"\aFFFFFFFFHE Grenade","\aFFFFFFFFMolotov","\aFFFFFFFFSmoke","\aFFFFFFFFFlash","\aFFFFFFFFFlash","\aFFFFFFFFDecoy","\aFFFFFFFFDecoy"};local utilities={"\aFFFFFFFFArmor","\aFFFFFFFFHelmet","\aFFFFFFFFZeus","\aFFFFFFFFDefuser"};local logged_grenades={};local translated_for_command={["\aFFFFFFFFAWP"]="buy awp",["\aFFFFFFFFSCAR20/G3SG1"]="buy scar20",["\aFFFFFFFFScout"]="buy ssg08",["\aFFFFFFFFM4/AK47"]="buy m4a1",["\aFFFFFFFFFamas/Galil"]="buy famas",["\aFFFFFFFFAug/SG553"]="buy aug",["\aFFFFFFFFM249/Negev"]="buy m249",["\aFFFFFFFFMag7/SawedOff"]="buy mag7",["\aFFFFFFFFNova"]="buy nova",["\aFFFFFFFFXM1014"]="buy xm1014",["\aFFFFFFFFMP9/Mac10"]="buy mp9",["\aFFFFFFFFUMP45"]="buy ump45",["\aFFFFFFFFPPBizon"]="buy bizon",["\aFFFFFFFFMP7"]="buy mp7",["\aFFFFFFFFCZ75/Tec9/FiveSeven"]="buy tec9",["\aFFFFFFFFP250"]="buy p250",["\aFFFFFFFFDeagle/Revolver"]="buy deagle",["\aFFFFFFFFDualies"]="buy elite",["\aFFFFFFFFHE Grenade"]="buy hegrenade",["\aFFFFFFFFMolotov"]="buy molotov",["\aFFFFFFFFSmoke"]="buy smokegrenade",["\aFFFFFFFFFlash"]="buy flashbang",["\aFFFFFFFFDecoy"]="buy decoy",["\aFFFFFFFFArmor"]="buy vest",["\aFFFFFFFFHelmet"]="buy vesthelm",["\aFFFFFFFFZeus"]="buy taser 34",["\aFFFFFFFFDefuser"]="buy defuser"};local buybot={enable=ui.new_checkbox("LUA","B","\aFFFFFFFFBuy Bot"),primary=ui.new_combobox("LUA","B","\aFFFFFFFFPrimary",primary_weapons),secondary=ui.new_combobox("LUA","B","\aFFFFFFFFSecondary",secondary_weapons),grenades=ui.new_multiselect("LUA","B","\aFFFFFFFFGrenades",grenades),utilities=ui.new_multiselect("LUA","B","\aFFFFFFFFUtilities",utilities),color_log=ui.new_checkbox("LUA","B","\aFFFFFFFFColor log"),color_picker=ui.new_color_picker("LUA","B","log",124,195,13,255)};misc_sep_bottom=ui.new_label("LUA","B",blue   .. pink   .. white );local function update_visibility() tab=ui.get(section_select);tag=clantag.map[ui.get(clantag.ref)] or "Disabled" ;anim=ui.get(clantag.animate);show_home=tab=="\aFFFFFFFFHome" ;show_rage=tab=="\aFFFFFFFFRage" ;show_visuals=tab=="\aFFFFFFFFVisuals" ;show_misc=tab=="\aFFFFFFFFMisc" ;ui.set_visible(husenhook_speed,show_home);ui.set_visible(rage_sep_top,show_rage);ui.set_visible(config.enabled,show_rage);local resolver_enabled=ui.get(config.enabled);local show_resolver=show_rage and resolver_enabled ;for k,v in pairs(config) do if (k~="enabled") then ui.set_visible(v,show_resolver);end end ui.set_visible(rage_sep_bottom,show_rage);ui.set_visible(visuals_sep_top,show_visuals);ui.set_visible(indictopspacer,show_visuals);ui.set_visible(indictext,show_visuals);ui.set_visible(indicatorbar,show_visuals);ui.set_visible(funtopspacer,show_visuals);ui.set_visible(funtext,show_visuals);ui.set_visible(funbar,show_visuals);ui.set_visible(china.enable,show_visuals);local china_enabled_state=ui.get(china.enable);local gradient_enabled_state=ui.get(china.gradient);ui.set_visible(china.color,show_visuals and china_enabled_state );ui.set_visible(china.gradient,show_visuals and china_enabled_state );ui.set_visible(china.speed,gradient_enabled_state and china_enabled_state and show_visuals );ui.set_visible(customizationtopspacer,show_visuals);ui.set_visible(customizationtext,show_visuals);ui.set_visible(customizationbar,show_visuals);ui.set_visible(vgui_recolor.label,show_visuals);ui.set_visible(vgui_recolor.color_picker,show_visuals);ui.set_visible(accentt.accent_label,show_visuals);ui.set_visible(accentt.accent_color,show_visuals);ui.set_visible(indicator_table.toggle,show_visuals);local debugbox_toggle_ref=debugbox.debugtoggle;ui.set_visible(debugbox.debugtoggle,show_visuals);ui.set_visible(visuals_sep_bottom,show_visuals);ui.set_visible(misc_sep_top,show_misc);ui.set_visible(clantag.ref,show_misc);ui.set_visible(clantag.animate,show_misc and (tag~="Disabled") );ui.set_visible(killsay.enabled,show_misc);ui.set_visible(killsay.phrase,show_misc and ui.get(killsay.enabled) );local function update_killsay_visibility() local killenabled=ui.get(killsay.enabled);local tab=ui.get(section_select);ui.set_visible(killsay.phrase,killenabled and (tab=="\aFFFFFFFFMisc") );end ui.set_callback(killsay.enabled,update_killsay_visibility);update_killsay_visibility();ui.set_callback(china.enable,update_visibility);ui.set_callback(china.gradient,update_visibility);ui.set_visible(buybot.enable,show_misc);local buyenabled=ui.get(buybot.enable);ui.set_visible(buybot.primary,buyenabled and show_misc );ui.set_visible(buybot.secondary,buyenabled and show_misc );ui.set_visible(buybot.grenades,buyenabled and show_misc );ui.set_visible(buybot.utilities,buyenabled and show_misc );ui.set_visible(buybot.color_log,buyenabled and show_misc );ui.set_visible(buybot.color_picker,buyenabled and show_misc );ui.set_visible(misc_sep_bottom,show_misc);end ui.set_callback(debugbox.debugtoggle,update_visibility);ui.set_callback(section_select,update_visibility);ui.set_callback(clantag.ref,update_visibility);ui.set_callback(clantag.animate,update_visibility);ui.set_callback(config.enabled,update_visibility);update_visibility();local last_tick=0;local cur_text="";local phase="type";local index=1;local last_tag="";local force_reset=true;client.set_event_callback("level_init",function() force_reset=true;last_tick=globals.tickcount();end);client.set_event_callback("begin_new_match",function() force_reset=true;last_tick=globals.tickcount();end);client.set_event_callback("paint",function() if (ui.get(clantag.ref)~="Disabled") then tag=clantag.map[ui.get(clantag.ref)] or "Disabled" ;animate=ui.get(clantag.animate);speed=3;if force_reset then client.set_clan_tag("");cur_text="";phase="type";index=1;last_tag=tag;force_reset=false;end if ((tag=="Disabled") or  not animate) then if (cur_text~=tag) then client.set_clan_tag(((tag=="Disabled") and "") or tag );cur_text=tag;end phase="type";index=1;last_tag=tag;return;end if (tag~=last_tag) then phase="type";index=1;last_tag=tag;end local delay=21 -(speed * 2) ;if ((globals.tickcount() -last_tick)<delay) then return;end last_tick=globals.tickcount();if (phase=="type") then cur_text=tag:sub(1,index);client.set_clan_tag(cur_text);index=index + 1 ;if (index> #tag) then phase="erase";index= #tag;end elseif (phase=="erase") then cur_text=tag:sub(1,index);client.set_clan_tag(cur_text);index=index-1 ;if (index<0) then client.set_clan_tag("");cur_text="";phase="type";index=1;end end end end);local phrase_sets={["\aFFFFFFFFNormal"]={"husenhook? more like perfection!","'1' sponsored by husenhook","husen x grib"},["\aFF0000FFG\aFFFF00FFa\a00FF00FFy (\a0000FFFFG\a4B0082FFr\a9400D3FFi\aFF1493FFb)"]={"hey, wanna do butt stuff? - husenjan","husenhook just 🆁🅰🅿🅴🅳 you like your uncle","what do you call a mexican hvher? JUAN"}};local function on_player_death(e) if  not ui.get(killsay.enabled) then return;end local victim_userid,attacker_userid=e.userid,e.attacker;if ( not victim_userid or  not attacker_userid) then return;end local victim_entindex=client.userid_to_entindex(victim_userid);local attacker_entindex=client.userid_to_entindex(attacker_userid);if ((attacker_entindex==entity.get_local_player()) and entity.is_enemy(victim_entindex)) then local selected_set=ui.get(killsay.phrase);local phrases=phrase_sets[selected_set] or phrase_sets['Normal'] ;local trashtalk=phrases[math.random( #phrases)];client.exec("say "   .. trashtalk );end end client.set_event_callback("player_death",on_player_death);function renderer_triangle(v2_A,v2_B,v2_C,r,g,b,a) local function i(j,k,l) local m=((k.y-j.y) * (l.x-k.x)) -((k.x-j.x) * (l.y-k.y)) ;if (m<0) then return true;end return false;end if i(v2_A,v2_B,v2_C) then renderer.triangle(v2_A.x,v2_A.y,v2_B.x,v2_B.y,v2_C.x,v2_C.y,r,g,b,a);elseif i(v2_A,v2_C,v2_B) then renderer.triangle(v2_A.x,v2_A.y,v2_C.x,v2_C.y,v2_B.x,v2_B.y,r,g,b,a);elseif i(v2_B,v2_C,v2_A) then renderer.triangle(v2_B.x,v2_B.y,v2_C.x,v2_C.y,v2_A.x,v2_A.y,r,g,b,a);elseif i(v2_B,v2_A,v2_C) then renderer.triangle(v2_B.x,v2_B.y,v2_A.x,v2_A.y,v2_C.x,v2_C.y,r,g,b,a);elseif i(v2_C,v2_A,v2_B) then renderer.triangle(v2_C.x,v2_C.y,v2_A.x,v2_A.y,v2_B.x,v2_B.y,r,g,b,a);else renderer.triangle(v2_C.x,v2_C.y,v2_B.x,v2_B.y,v2_A.x,v2_A.y,r,g,b,a);end end function world_circle(origin,size) if (origin[1]==nil) then return;end last_point=nil;gradient_g=ui.get(china.gradient);color_g={ui.get(china.color)};for i=0,360,5 do new_point={origin[1] -(math.sin(math.rad(i)) * size) ,origin[2] -(math.cos(math.rad(i)) * size) ,origin[3]};actual_color=color_g;if gradient_g then local hue_offset=0;hue_offset=((globals.realtime() * ui.get(china.speed) * 50) + i)%360 ;hue_offset=math.min(360,math.max(0,hue_offset));local r,g,b=hsv_to_rgb(hue_offset/360 ,1,1);color_g={r,g,b,255};end if (last_point~=nil) then old_screen_point={renderer.world_to_screen(last_point[1],last_point[2],last_point[3])};new_screen_point={renderer.world_to_screen(new_point[1],new_point[2],new_point[3])};origin_screen_point={renderer.world_to_screen(origin[1],origin[2],origin[3] + 8 )};if ((old_screen_point[1]~=nil) and (new_screen_point[1]~=nil) and (origin_screen_point[1]~=nil)) then renderer_triangle({x=old_screen_point[1],y=old_screen_point[2]},{x=new_screen_point[1],y=new_screen_point[2]},{x=origin_screen_point[1],y=origin_screen_point[2]},color_g[1],color_g[2],color_g[3],50);renderer.line(old_screen_point[1],old_screen_point[2],new_screen_point[1],new_screen_point[2],color_g[1],color_g[2],color_g[3],255);end end last_point=new_point;end end client.set_event_callback("paint_ui",function() master_state=ui.get(china.enable);if ( not master_state or  not ui.get(china.thirdperson[1]) or  not ui.get(china.thirdperson[2]) or (lp()==nil) or (entity.is_alive(lp())==false)) then return;end world_circle({entity.hitbox_position(lp(),0)},10);end);materials={"vgui_white","vgui/hud/800corner1","vgui/hud/800corner2","vgui/hud/800corner3","vgui/hud/800corner4"};client.set_event_callback("paint",function() local r,g,b,a=ui.get(vgui_recolor.color_picker);if  not console_is_visible(engine_client) then r,g,b,a=255,255,255,255;end for _,mat in pairs(materials) do find_material(mat):alpha_modulate(a);find_material(mat):color_modulate(r,g,b);end end);function grenade_limit_callback(val) local value=ui.get(val);if ( #value>=5) then ui.set(val,logged_grenades);return;end logged_grenades=value;end husentext="husenhook: ";function on_round_prestart() if  not ui.get(buybot.enable) then return;end local r,g,b=ui.get(accentt.accent_color);local primary=ui.get(buybot.primary);if translated_for_command[primary] then console_cmd(translated_for_command[primary]);client.color_log(r,g,b,husentext   .. 255 ,255,255,"Bought Primary Weapon");end local secondary=ui.get(buybot.secondary);if translated_for_command[secondary] then console_cmd(translated_for_command[secondary]);client.color_log(r,g,b,husentext);client.color_log(r,g,b,husentext   .. 255 ,255,255,"Bought Secondary Weapon");end for _,nade in ipairs(ui.get(buybot.grenades)) do local cmd=translated_for_command[nade];if cmd then console_cmd(cmd);client.color_log(r,g,b,husentext   .. 255 ,255,255,"Bought Grenades");end end for _,util in ipairs(ui.get(buybot.utilities)) do local cmd=translated_for_command[util];if cmd then console_cmd(cmd);client.color_log(r,g,b,husentext   .. 255 ,255,255,"Bought Utility");end end end ui.set(config.enabled,true);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.resoindicators,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.presets,"\aFFFFFFFFMaximum");local enemy_data={};local resolver_log={};local hit_log={};local cache={};local last_cleanup=0;local model={weights={},confidence={},learning_rate=0.05};local patterns={{ -35,35},{ -58,58},{ -29,29},{ -180,0,180}};local cheat_patterns={OTC={{35, -35},{58, -58}},Skeet={{ -60,60,180,0},{60, -60,0}},Fatality={{29, -29},{32, -32}}};local function normalize_angle(angle) angle=angle%360 ;if (angle>180) then angle=angle-360 ;elseif (angle< -180) then angle=angle + 360 ;end return angle;end local function angle_diff(a,b) local diff=normalize_angle(a-b );return math.abs(diff);end local function clamp(val,min,max) if (val<min) then return min;end if (val>max) then return max;end return val;end local function avg(t) if ( #t==0) then return 0;end local sum=0;for i=1, #t do sum=sum + t[i] ;end return sum/ #t ;end local function detect_pattern(history) if ( #history<4) then return false,0,"unknown";end local deltas={};for i=2, #history do deltas[i-1 ]=normalize_angle(history[i] -history[i-1 ] );end local is_alternating=true;for i=3, #deltas do if (math.abs(deltas[i] -deltas[i-2 ] )>10) then is_alternating=false;break;end end if (is_alternating and ( #deltas>=3)) then local last_delta=deltas[ #deltas];return true, -last_delta,"alternating";end for _,pattern in ipairs(patterns) do local matches=0;local total= #deltas *  #pattern ;for i=1, #deltas do for j=1, #pattern do local pattern_idx=(((i + j) -2)% #pattern) + 1 ;if (math.abs(deltas[i] -pattern[pattern_idx] )<8) then matches=matches + 1 ;end end end if ((matches/total)>0.6) then local next_idx=( #deltas% #pattern) + 1 ;return true,pattern[next_idx],"pattern";end end local std_dev=0;local mean=avg(history);for i=1, #history do std_dev=std_dev + ((history[i] -mean)^2) ;end std_dev=math.sqrt(std_dev/ #history );if (std_dev<10) then return true,0,"static";end return false,0,"unknown";end local function detect_cheat(history) if ( #history<5) then return nil,0;end local deltas={};for i=2, #history do deltas[i-1 ]=normalize_angle(history[i] -history[i-1 ] );end local best_match=nil;local best_confidence=0;for cheat,patterns in pairs(cheat_patterns) do for _,pattern in ipairs(patterns) do local matches=0;local total=0;for i=1, #deltas do for j=1, #pattern do local pattern_idx=(((i + j) -2)% #pattern) + 1 ;if (math.abs(deltas[i] -pattern[pattern_idx] )<8) then matches=matches + 1 ;end total=total + 1 ;end end if (total>0) then local confidence=matches/total ;if (confidence>best_confidence) then best_confidence=confidence;best_match=cheat;end end end end if (best_confidence>0.5) then return best_match,best_confidence;end return nil,0;end local function analyze_animations(player) local result={is_desync=false,desync_amount=0,moving=false,in_air=false};local velocity={entity.get_prop(player,"m_vecVelocity")};local speed=0;if (velocity[1] and velocity[2]) then speed=math.sqrt((velocity[1]^2) + (velocity[2]^2) );end local flags=entity.get_prop(player,"m_fFlags") or 0 ;local on_ground=bit.band(flags,1)==1 ;result.is_desync=true;result.desync_amount=(((player%2) * 2) -1) * 58 ;if (speed>5) then result.desync_amount=result.desync_amount * 0.5 ;result.moving=true;end result.in_air= not on_ground;return result;end local function analyze_bones(player) local result={is_sideways=false,head_yaw=0,body_yaw_diff=0};local head_pos={entity.hitbox_position(player,0)};local spine_pos={entity.hitbox_position(player,3)};if ( not head_pos[1] or  not spine_pos[1]) then return result;end local head_yaw=math.deg(math.atan2(head_pos[2] -spine_pos[2] ,head_pos[1] -spine_pos[1] ));local eye_angles={entity.get_prop(player,"m_angEyeAngles")};local eye_yaw=eye_angles[2] or head_yaw ;local body_yaw_diff=normalize_angle(head_yaw-eye_yaw );result.is_sideways=math.abs(body_yaw_diff)>50 ;result.head_yaw=head_yaw;result.body_yaw_diff=body_yaw_diff;if result.is_sideways then result.side=((body_yaw_diff>0) and 1) or  -1 ;end return result;end local function update_model(player,data,was_correct,angle) if  not model.weights[player] then model.weights[player]={lby=0.5,eye=0.3,desync=0.6,jitter=0.5,edge=0.4,freestand=0.5,bone=0.5};model.confidence[player]=0.5;end local adjust=(was_correct and model.learning_rate) or  -model.learning_rate ;local angle_factor=0;if (angle and data.last_resolved_angle) then local diff=angle_diff(angle,data.last_resolved_angle);if was_correct then angle_factor=(1 -math.min(1,diff/90 )) * 0.1 ;else angle_factor= -(1 -math.min(1,diff/90 )) * 0.05 ;end end adjust=adjust + angle_factor ;for k,v in pairs(model.weights[player]) do local new_weight=v + adjust ;model.weights[player][k]=clamp(new_weight,0.1,0.9);end if (was_correct and data.last_resolver_mode) then local mode=string.lower(data.last_resolver_mode);if string.find(mode,"lby") then model.weights[player].lby=model.weights[player].lby + 0.03 ;elseif string.find(mode,"jitter") then model.weights[player].jitter=model.weights[player].jitter + 0.03 ;elseif string.find(mode,"bone") then model.weights[player].bone=model.weights[player].bone + 0.03 ;end end if was_correct then model.confidence[player]=math.min(0.95,model.confidence[player] + 0.03 );else model.confidence[player]=math.max(0.1,model.confidence[player] -0.05 );end end local function resolve_player(player) local cache_key=player   .. "_"   .. (globals.tickcount()%8) ;if cache[cache_key] then return cache[cache_key];end if ((globals.realtime() -last_cleanup)>5) then cache={};last_cleanup=globals.realtime();end data=enemy_data[player] or {} ;enemy_data[player]=data;local history_size=ui.get(config.history_size);data.lby_history=data.lby_history or {} ;data.eye_history=data.eye_history or {} ;data.hits=data.hits or 0 ;data.shots=data.shots or 0 ;local origin={entity.get_prop(player,"m_vecOrigin")};local velocity={entity.get_prop(player,"m_vecVelocity")};local speed=0;if (velocity[1] and velocity[2]) then speed=math.sqrt((velocity[1]^2) + (velocity[2]^2) );end local eye_angles={entity.get_prop(player,"m_angEyeAngles")};local lby=entity.get_prop(player,"m_flLowerBodyYawTarget") or 0 ;local flags=entity.get_prop(player,"m_fFlags") or 0 ;local on_ground=bit.band(flags,1)==1 ;table.insert(data.lby_history,lby);if eye_angles[2] then table.insert(data.eye_history,eye_angles[2]);end while  #data.lby_history>history_size  do table.remove(data.lby_history,1);end while  #data.eye_history>history_size  do table.remove(data.eye_history,1);end local on_edge=false;if (ui.get(config.edge_detect) and origin[1]) then local edge_count=0;for i= -45,45,15 do local rad=math.rad(i);local trace_x=origin[1] + (math.cos(rad) * 30) ;local trace_y=origin[2] + (math.sin(rad) * 30) ;local trace=client.trace_line(player,origin[1],origin[2],origin[3] + 10 ,trace_x,trace_y,origin[3] -100 );if (trace.fraction>0.9) then edge_count=edge_count + 1 ;end end on_edge=edge_count>=3 ;end local freestanding=false;local freestand_side=nil;if (ui.get(config.freestand) and origin[1]) then local local_player=entity.get_local_player();if local_player then local local_origin={entity.get_prop(local_player,"m_vecOrigin")};if local_origin[1] then local angle_to_local=math.deg(math.atan2(local_origin[2] -origin[2] ,local_origin[1] -origin[1] ));local left_traces=0;local right_traces=0;for i=20,60,20 do local left_rad=math.rad(angle_to_local + i );local trace_left=client.trace_line(player,origin[1],origin[2],origin[3] + 50 ,origin[1] + (math.cos(left_rad) * 100) ,origin[2] + (math.sin(left_rad) * 100) ,origin[3] + 50 );local right_rad=math.rad(angle_to_local-i );local trace_right=client.trace_line(player,origin[1],origin[2],origin[3] + 50 ,origin[1] + (math.cos(right_rad) * 100) ,origin[2] + (math.sin(right_rad) * 100) ,origin[3] + 50 );if (trace_left.fraction<trace_right.fraction) then left_traces=left_traces + 1 ;elseif (trace_right.fraction<trace_left.fraction) then right_traces=right_traces + 1 ;end end if (left_traces>(right_traces + 1)) then freestanding=true;freestand_side="right";elseif (right_traces>(left_traces + 1)) then freestanding=true;freestand_side="left";end end end end local anim_data=nil;local bone_data=nil;if ui.get(config.anim_analysis) then anim_data=analyze_animations(player);end if ui.get(config.bone_analysis) then bone_data=analyze_bones(player);end local is_jittering,next_delta,pattern_type=false,0,"unknown";if (ui.get(config.jitter_detect) and ( #data.eye_history>=4)) then is_jittering,next_delta,pattern_type=detect_pattern(data.eye_history);end local cheat_type,cheat_confidence=detect_cheat(data.eye_history);if cheat_type then data.cheat_type=cheat_type;data.cheat_confidence=cheat_confidence;end local resolved_angle=0;local resolver_state="UNKNOWN";local confidence=0.5;if ((speed>5) and on_ground) then data.last_moving_lby=lby;data.last_moving_time=globals.curtime();resolved_angle=lby;resolver_state="MOVING";confidence=0.9;else local candidates={};if (ui.get(config.lby_pred) and data.last_moving_lby and ((globals.curtime() -(data.last_moving_time or 0))<5)) then local time_since_move=globals.curtime() -(data.last_moving_time or 0) ;local decay=math.max(0.3,1 -(time_since_move/5) );local lby_offset=0;if (data.cheat_type=="OTC") then lby_offset=(((player%2) * 2) -1) * 35 ;elseif (data.cheat_type=="Skeet") then lby_offset=(((player%2) * 2) -1) * 58 ;else lby_offset=((player%3) -1) * (35 + (time_since_move * 5)) ;end local lby_prediction=data.last_moving_lby + (lby_offset * decay) ;table.insert(candidates,{angle=lby_prediction,state="LBY_PRED",confidence=0.7 * decay });end if (bone_data and bone_data.is_sideways) then local side_dir=bone_data.side or ((bone_data.body_yaw_diff>0) and 1) or  -1 ;local bone_angle=lby + (side_dir * 90) ;table.insert(candidates,{angle=bone_angle,state="BONE",confidence=0.8});elseif (anim_data and anim_data.is_desync) then local desync_dir=((anim_data.desync_amount>0) and 1) or  -1 ;local desync_amount=math.min(60,math.abs(anim_data.desync_amount));local anim_angle=lby + (desync_dir * desync_amount) ;table.insert(candidates,{angle=anim_angle,state="ANIM",confidence=0.75});end if is_jittering then local jitter_base=eye_angles[2] or lby ;local jitter_prediction=jitter_base + next_delta ;local jitter_confidence=0.75;if (pattern_type=="static") then jitter_confidence=0.85;elseif (pattern_type=="alternating") then jitter_confidence=0.78;end table.insert(candidates,{angle=jitter_prediction,state="JITTER_"   .. string.upper(pattern_type) ,confidence=jitter_confidence});end if ((ui.get(config.mode)=="\aFFFFFFFFDelta") and ( #data.eye_history>3)) then local avg_delta=0;for i=2, #data.eye_history do avg_delta=avg_delta + normalize_angle(data.eye_history[i] -data.eye_history[i-1 ] ) ;end avg_delta=avg_delta/( #data.eye_history-1) ;local delta_angle=(eye_angles[2] or lby) + avg_delta ;table.insert(candidates,{angle=delta_angle,state="DELTA",confidence=0.65});end local eye_base=eye_angles[2] or lby ;local mode=ui.get(config.mode);if (mode=="\aFFFFFFFFAggressive") then table.insert(candidates,{angle=eye_base + 180 ,state="AGGRESSIVE",confidence=0.5});elseif (mode=="Brute") then local brute_angles={0,35, -35,58, -58,180};local cycle=0;if (ui.get(config.adaptive_brute) and data.hits) then cycle=(data.hits% #brute_angles) + 1 ;else cycle=(globals.tickcount()% #brute_angles) + 1 ;end table.insert(candidates,{angle=eye_base + brute_angles[cycle] ,state="BRUTE_"   .. brute_angles[cycle] ,confidence=0.4});elseif ((mode=="\aFFFFFFFFAdaptive") or (mode=="\aFFFFFFFFSmart")) then local player_seed=player%100 ;local adaptive_sets={{ -30,0,30},{ -58,0,58},{ -35,35},{ -180,0}};local set_index=(player_seed% #adaptive_sets) + 1 ;local angle_index=(globals.tickcount()% #adaptive_sets[set_index]) + 1 ;if (adaptive_sets[set_index] and adaptive_sets[set_index][angle_index]) then table.insert(candidates,{angle=eye_base + adaptive_sets[set_index][angle_index] ,state="ADAPTIVE",confidence=0.65});end elseif (mode=="\aFFFFFFFFWeighted") then if (model.weights[player] and model.confidence[player] and (model.confidence[player]>0.4)) then local w=model.weights[player];local weighted_angle=0;local weight_sum=0;if w.lby then weighted_angle=weighted_angle + (lby * w.lby) ;weight_sum=weight_sum + w.lby ;end if (eye_angles[2] and w.eye) then weighted_angle=weighted_angle + (eye_angles[2] * w.eye) ;weight_sum=weight_sum + w.eye ;end if (weight_sum>0) then weighted_angle=weighted_angle/weight_sum ;table.insert(candidates,{angle=weighted_angle,state="WEIGHTED",confidence=model.confidence[player]});end end end if (data.cheat_type and data.cheat_confidence and (data.cheat_confidence>0.7)) then local cheat_angles={};if (data.cheat_type=="OTC") then cheat_angles={35, -35,180};elseif (data.cheat_type=="Skeet") then cheat_angles={60, -60,180};elseif (data.cheat_type=="Fatality") then cheat_angles={32, -32,16, -16};end if ( #cheat_angles>0) then local cycle_index=(globals.tickcount()% #cheat_angles) + 1 ;if cheat_angles[cycle_index] then table.insert(candidates,{angle=eye_base + cheat_angles[cycle_index] ,state="CHEAT_"   .. data.cheat_type ,confidence=data.cheat_confidence});end end end if (on_edge or freestanding) then local edge_modifier=0;local freestand_modifier=0;if on_edge then edge_modifier=60;end if (freestanding and freestand_side) then freestand_modifier=((freestand_side=="left") and  -80) or 80 ;end for i=1, #candidates do if candidates[i] then candidates[i].angle=candidates[i].angle + edge_modifier + freestand_modifier ;candidates[i].state=candidates[i].state   .. ((on_edge and "_EDGE") or "")   .. ((freestanding and ("_"   .. string.upper(freestand_side or "FREE" ))) or "") ;end end end if (data.last_hit_angle and data.last_hit_time and ((globals.realtime() -(data.last_hit_time or 0))<5)) then local time_factor=clamp(1 -((globals.realtime() -(data.last_hit_time or 0))/5) ,0.4,1);table.insert(candidates,{angle=data.last_hit_angle,state="PREVIOUS_HIT",confidence=0.85 * time_factor });end local defensive_mode=ui.get(config.defensive);local best_candidate=nil;local best_confidence=0;for i=1, #candidates do local c=candidates[i];if c then local safe=defensive_mode and (c.confidence>=0.7) and (c.state:find("LBY") or c.state:find("BONE") or c.state:find("ANIM") or c.state:find("STATIC")) ;if (( not defensive_mode or safe) and (c.confidence>best_confidence)) then best_confidence=c.confidence;best_candidate=c;end end end if best_candidate then resolved_angle=best_candidate.angle;resolver_state=best_candidate.state;confidence=best_candidate.confidence;else resolved_angle=lby + 180 ;resolver_state="FALLBACK";confidence=0.3;end end local strength=ui.get(config.strength)/100 ;local safety=ui.get(config.safety)/100 ;local adaptive_strength=strength * (0.5 + (confidence * 0.5)) * (1 -(safety * 0.3)) ;local eye_base=eye_angles[2] or lby ;local angle_delta=normalize_angle(resolved_angle-eye_base );resolved_angle=eye_base + (angle_delta * adaptive_strength) ;data.last_resolved_angle=resolved_angle;data.resolver_state=resolver_state;data.confidence=confidence;data.last_resolver_mode=resolver_state;table.insert(resolver_log,1,{tick=globals.tickcount(),player=player,angle=resolved_angle,state=resolver_state,lby=lby,eye=eye_angles[2],confidence=confidence});if ( #resolver_log>32) then table.remove(resolver_log);end cache[cache_key]=resolved_angle;return resolved_angle;end local function apply_preset(name) if (name=="\aFFFFFFFFHvH") then ui.set(config.mode,"\aFFFFFFFFWeighted");ui.set(config.strength,100);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.freestand,true);ui.set(config.adaptive_brute,true);ui.set(config.shot_validate,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.safety,25);elseif (name=="\aFFFFFFFFMaximum") then ui.set(config.mode,"\aFFFFFFFFAggressive");ui.set(config.strength,100);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.freestand,true);ui.set(config.adaptive_brute,true);ui.set(config.shot_validate,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.safety,0);elseif (name=="\aFFFFFFFFBalanced") then ui.set(config.mode,"\aFFFFFFFFDelta");ui.set(config.strength,85);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.freestand,true);ui.set(config.adaptive_brute,true);ui.set(config.shot_validate,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.safety,50);end end local function on_paint() if  not ui.get(config.enabled) then return;end local local_player=entity.get_local_player();if ( not local_player or  not entity.is_alive(local_player)) then return;end if ui.get(config.enabled) then local mode=ui.get(config.mode);local def=ui.get(config.defensive);local r,g,b=(def and 150) or 100 ,(def and 255) or 180 ,100;local hud_x=ui.get(config.hud_x);local hud_y=ui.get(config.hud_y);local y=hud_y;renderer.text(hud_x,y,255,255,255,255,"",0,"Resolver Status:");y=y + 15 ;renderer.text(hud_x,y,r,g,b,255,"",0,"Mode: "   .. mode   .. ((def and " (Defensive)") or "") );y=y + 15 ;local resolved_count=0;for i=1,64 do if ((i~=local_player) and entity.is_enemy(i) and entity.is_alive(i)) then local data=enemy_data[i];if (data and data.resolver_state) then resolved_count=resolved_count + 1 ;end end end y=y + 15 ;renderer.text(hud_x,y,200,200,255,255,"",0,"Resolved Enemies: "   .. resolved_count );end if ui.get(config.resoindicators) then for i=1,64 do if ((i~=local_player) and entity.is_enemy(i) and entity.is_alive(i)) then local origin={entity.get_prop(i,"m_vecOrigin")};if origin[1] then local screen_x,screen_y=renderer.world_to_screen(origin[1],origin[2],origin[3]);if (screen_x and screen_y) then local data=enemy_data[i];if (data and data.resolver_state) then local confidence=data.confidence or 0.5 ;local r=255 * (1 -confidence) ;local g=255 * confidence ;local b=100;if (data.last_hit==globals.tickcount()) then r,g,b=50,255,50;elseif (data.last_shot==globals.tickcount()) then r,g,b=255,50,50;end renderer.text(screen_x,screen_y-20 ,r,g,b,255,"c",0,string.format("%s: %.1f°",data.resolver_state,data.last_resolved_angle or 0 ));if (data.hits and data.shots and (data.shots>0)) then local accuracy=math.floor((data.hits/data.shots) * 100 );renderer.text(screen_x,screen_y-40 ,r,g,b,255,"c",0,string.format("%d/%d (%d%%)",data.hits,data.shots,accuracy));end local width=50 * confidence ;renderer.rectangle(screen_x-25 ,screen_y-55 ,50,5,40,40,40,180);renderer.rectangle(screen_x-25 ,screen_y-55 ,width,5,r,g,b,200);if (data.cheat_type and ui.get(config.debug)) then renderer.text(screen_x,screen_y-70 ,255,200,100,255,"c",0,string.format("%s (%.0f%%)",data.cheat_type,(data.cheat_confidence or 0) * 100 ));end end end end end end end if ui.get(config.debug) then local y_offset=50;renderer.text(10,y_offset,255,255,255,255,"",0,"Resolver Log:");y_offset=y_offset + 15 ;for i=1,math.min(8, #resolver_log) do local entry=resolver_log[i];local r=255 * (1 -(entry.confidence or 0.5)) ;local g=255 * (entry.confidence or 0.5) ;renderer.text(10,y_offset,r,g,200,255,"",0,string.format("P%d: %s @ %.1f° (LBY: %.1f, Conf: %.2f)",entry.player,entry.state,entry.angle,entry.lby or 0 ,entry.confidence or 0 ));y_offset=y_offset + 15 ;end if (ui.get(config.hitlogs) and ( #hit_log>0)) then y_offset=y_offset + 15 ;renderer.text(10,y_offset,255,255,255,255,"",0,"Hit Logs:");y_offset=y_offset + 15 ;for i=1,math.min(4, #hit_log) do local entry=hit_log[i];renderer.text(10,y_offset,100,255,100,255,"",0,string.format("P%d: %d dmg (group %d, angle: %.1f°)",entry.player,entry.damage,entry.hitgroup,entry.angle or 0 ));y_offset=y_offset + 15 ;end end end end local function on_player_hurt(e) local attacker=client.userid_to_entindex(e.attacker);local victim=client.userid_to_entindex(e.userid);if (attacker==entity.get_local_player()) then enemy_data[victim]=enemy_data[victim] or {} ;enemy_data[victim].last_hit=globals.tickcount();enemy_data[victim].hits=(enemy_data[victim].hits or 0) + 1 ;local victim_origin={entity.get_prop(victim,"m_vecOrigin")};local attacker_origin={entity.get_prop(attacker,"m_vecOrigin")};if (victim_origin[1] and attacker_origin[1]) then local pitch,yaw=client.camera_angles();enemy_data[victim].last_hit_angle=yaw;enemy_data[victim].last_hit_time=globals.realtime();if ui.get(config.shot_validate) then update_model(victim,enemy_data[victim],true,yaw);end if ui.get(config.hitlogs) then table.insert(hit_log,1,{tick=globals.tickcount(),player=victim,damage=e.dmg_health,hitgroup=e.hitgroup,angle=yaw});if ( #hit_log>16) then table.remove(hit_log);end end if ui.get(config.logs) then local resolver_info=enemy_data[victim].resolver_state or "Unknown" ;local angle_info=(enemy_data[victim].last_resolved_angle and string.format("%.1f°",enemy_data[victim].last_resolved_angle)) or "?" ;client.log(string.format("Hit %s for %d damage (resolver: %s @ %s)",entity.get_player_name(victim),e.dmg_health,resolver_info,angle_info));end end end end local function on_bullet_impact(e) local shooter=client.userid_to_entindex(e.userid);if (shooter==entity.get_local_player()) then local closest_dist=99999;local closest_ent=nil;for i=1,64 do if ((i~=entity.get_local_player()) and entity.is_enemy(i) and entity.is_alive(i)) then local origin={entity.get_prop(i,"m_vecOrigin")};if origin[1] then local dist=((e.x-origin[1])^2) + ((e.y-origin[2])^2) + ((e.z-origin[3])^2) ;if (dist<closest_dist) then closest_dist=dist;closest_ent=i;end end end end if (closest_ent and (closest_dist<10000)) then enemy_data[closest_ent]=enemy_data[closest_ent] or {} ;enemy_data[closest_ent].last_shot=globals.tickcount();enemy_data[closest_ent].shots=(enemy_data[closest_ent].shots or 0) + 1 ;if (ui.get(config.shot_validate) and (enemy_data[closest_ent].last_hit~=globals.tickcount())) then local pitch,yaw=client.camera_angles();update_model(closest_ent,enemy_data[closest_ent],false,yaw);if ui.get(config.logs) then local resolver_info=enemy_data[closest_ent].resolver_state or "Unknown" ;local angle_info=(enemy_data[closest_ent].last_resolved_angle and string.format("%.1f°",enemy_data[closest_ent].last_resolved_angle)) or "?" ;client.log(string.format("Missed %s (resolver: %s @ %s)",entity.get_player_name(closest_ent),resolver_info,angle_info));end end end end end local function on_player_death(e) local victim=client.userid_to_entindex(e.userid);if (victim and enemy_data[victim]) then local hits=enemy_data[victim].hits;local shots=enemy_data[victim].shots;local cheat_type=enemy_data[victim].cheat_type;local cheat_confidence=enemy_data[victim].cheat_confidence;enemy_data[victim]={hits=hits,shots=shots,cheat_type=cheat_type,cheat_confidence=cheat_confidence};if model.weights[victim] then model.confidence[victim]=(model.confidence[victim] or 0.5) * 0.9 ;end end end local function on_round_start() cache={};for player,data in pairs(enemy_data) do local hits=data.hits;local shots=data.shots;local cheat_type=data.cheat_type;local cheat_confidence=data.cheat_confidence;enemy_data[player]={hits=hits,shots=shots,cheat_type=cheat_type,cheat_confidence=cheat_confidence};end end local function on_preset_change() local preset=ui.get(config.presets);apply_preset(preset);end local function on_aim_target(player) if ( not ui.get(config.enabled) or  not player or  not entity.is_alive(player)) then return;end return resolve_player(player);end ui.set_callback(config.presets,on_preset_change);client.set_event_callback("paint",on_paint);client.set_event_callback("player_hurt",on_player_hurt);client.set_event_callback("bullet_impact",on_bullet_impact);client.set_event_callback("player_death",on_player_death);client.set_event_callback("round_start",on_round_start);pcall(function() client.set_event_callback("aim_target",on_aim_target);end);apply_preset(ui.get(config.presets));local function apply_preset(name) if (name=="\aFFFFFFFFHvH") then ui.set(config.mode,"\aFFFFFFFFWeighted");ui.set(config.strength,100);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.freestand,true);ui.set(config.adaptive_brute,true);ui.set(config.shot_validate,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.safety,25);elseif (name=="\aFFFFFFFFMaximum") then ui.set(config.mode,"\aFFFFFFFFWeighted");ui.set(config.strength,100);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.freestand,true);ui.set(config.adaptive_brute,true);ui.set(config.shot_validate,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.safety,0);elseif (name=="\aFFFFFFFFBalanced") then ui.set(config.mode,"\aFFFFFFFFDelta");ui.set(config.strength,85);ui.set(config.lby_pred,true);ui.set(config.edge_detect,true);ui.set(config.freestand,true);ui.set(config.adaptive_brute,true);ui.set(config.shot_validate,true);ui.set(config.jitter_detect,true);ui.set(config.anim_analysis,true);ui.set(config.bone_analysis,true);ui.set(config.safety,50);end end local function on_paint() if  not ui.get(config.enabled) then return;end local local_player=entity.get_local_player();if ( not local_player or  not entity.is_alive(local_player)) then return;end if ui.get(config.resoindicators) then for i=1,64 do if ((i~=local_player) and entity.is_enemy(i) and entity.is_alive(i)) then local origin={entity.get_prop(i,"m_vecOrigin")};if origin[1] then local screen_x,screen_y=renderer.world_to_screen(origin[1],origin[2],origin[3]);if (screen_x and screen_y) then local data=enemy_data[i];if (data and data.resolver_state) then local confidence=data.confidence or 0.5 ;local r=255 * (1 -confidence) ;local g=255 * confidence ;local b=100;if (data.last_hit==globals.tickcount()) then r,g,b=50,255,50;elseif (data.last_shot==globals.tickcount()) then r,g,b=255,50,50;end renderer.text(screen_x,screen_y-20 ,r,g,b,255,"c",0,string.format("%s: %.1f°",data.resolver_state,data.last_resolved_angle or 0 ));if (data.hits and data.shots and (data.shots>0)) then local accuracy=math.floor((data.hits/data.shots) * 100 );renderer.text(screen_x,screen_y-40 ,r,g,b,255,"c",0,string.format("%d/%d (%d%%)",data.hits,data.shots,accuracy));end local width=50 * confidence ;renderer.rectangle(screen_x-25 ,screen_y-55 ,50,5,40,40,40,180);renderer.rectangle(screen_x-25 ,screen_y-55 ,width,5,r,g,b,200);if (data.cheat_type and ui.get(config.debug)) then renderer.text(screen_x,screen_y-70 ,255,200,100,255,"c",0,string.format("%s (%.0f%%)",data.cheat_type,(data.cheat_confidence or 0) * 100 ));end end end end end end end if ui.get(config.debug) then local y_offset=400;renderer.text(10,y_offset,255,255,255,255,"",0,"Resolver Log:");y_offset=y_offset + 15 ;for i=1,math.min(8, #resolver_log) do local entry=resolver_log[i];local r=255 * (1 -(entry.confidence or 0.5)) ;local g=255 * (entry.confidence or 0.5) ;renderer.text(10,y_offset,r,g,200,255,"",0,string.format("P%d: %s @ %.1f° (LBY: %.1f, Conf: %.2f)",entry.player,entry.state,entry.angle,entry.lby or 0 ,entry.confidence or 0 ));y_offset=y_offset + 15 ;end if (ui.get(config.hitlogs) and ( #hit_log>0)) then y_offset=y_offset + 15 ;renderer.text(10,y_offset,255,255,255,255,"",0,"Hit Logs:");y_offset=y_offset + 15 ;for i=1,math.min(4, #hit_log) do local entry=hit_log[i];renderer.text(10,y_offset,100,255,100,255,"",0,string.format("P%d: %d dmg (group %d, angle: %.1f°)",entry.player,entry.damage,entry.hitgroup,entry.angle or 0 ));y_offset=y_offset + 15 ;end end end end local function on_player_hurt(e) local attacker=client.userid_to_entindex(e.attacker);local victim=client.userid_to_entindex(e.userid);if (attacker==entity.get_local_player()) then enemy_data[victim]=enemy_data[victim] or {} ;enemy_data[victim].last_hit=globals.tickcount();enemy_data[victim].hits=(enemy_data[victim].hits or 0) + 1 ;local victim_origin={entity.get_prop(victim,"m_vecOrigin")};local attacker_origin={entity.get_prop(attacker,"m_vecOrigin")};if (victim_origin[1] and attacker_origin[1]) then local pitch,yaw=client.camera_angles();enemy_data[victim].last_hit_angle=yaw;enemy_data[victim].last_hit_time=globals.realtime();if ui.get(config.shot_validate) then update_model(victim,enemy_data[victim],true,yaw);end if ui.get(config.hitlogs) then table.insert(hit_log,1,{tick=globals.tickcount(),player=victim,damage=e.dmg_health,hitgroup=e.hitgroup,angle=yaw});if ( #hit_log>16) then table.remove(hit_log);end end if ui.get(config.logs) then local resolver_info=enemy_data[victim].resolver_state or "Unknown" ;local angle_info=(enemy_data[victim].last_resolved_angle and string.format("%.1f°",enemy_data[victim].last_resolved_angle)) or "?" ;client.log(string.format("Hit %s for %d damage (resolver: %s @ %s)",entity.get_player_name(victim),e.dmg_health,resolver_info,angle_info));end end end end local function on_bullet_impact(e) local shooter=client.userid_to_entindex(e.userid);if (shooter==entity.get_local_player()) then local closest_dist=99999;local closest_ent=nil;for i=1,64 do if ((i~=entity.get_local_player()) and entity.is_enemy(i) and entity.is_alive(i)) then local origin={entity.get_prop(i,"m_vecOrigin")};if origin[1] then local dist=((e.x-origin[1])^2) + ((e.y-origin[2])^2) + ((e.z-origin[3])^2) ;if (dist<closest_dist) then closest_dist=dist;closest_ent=i;end end end end if (closest_ent and (closest_dist<10000)) then enemy_data[closest_ent]=enemy_data[closest_ent] or {} ;enemy_data[closest_ent].last_shot=globals.tickcount();enemy_data[closest_ent].shots=(enemy_data[closest_ent].shots or 0) + 1 ;if (ui.get(config.shot_validate) and (enemy_data[closest_ent].last_hit~=globals.tickcount())) then local pitch,yaw=client.camera_angles();update_model(closest_ent,enemy_data[closest_ent],false,yaw);if ui.get(config.logs) then local resolver_info=enemy_data[closest_ent].resolver_state or "Unknown" ;local angle_info=(enemy_data[closest_ent].last_resolved_angle and string.format("%.1f°",enemy_data[closest_ent].last_resolved_angle)) or "?" ;client.log(string.format("Missed %s (resolver: %s @ %s)",entity.get_player_name(closest_ent),resolver_info,angle_info));end end end end end local function on_player_death(e) local victim=client.userid_to_entindex(e.userid);if (victim and enemy_data[victim]) then local hits=enemy_data[victim].hits;local shots=enemy_data[victim].shots;local cheat_type=enemy_data[victim].cheat_type;local cheat_confidence=enemy_data[victim].cheat_confidence;enemy_data[victim]={hits=hits,shots=shots,cheat_type=cheat_type,cheat_confidence=cheat_confidence};if model.weights[victim] then model.confidence[victim]=(model.confidence[victim] or 0.5) * 0.9 ;end end end local function on_round_start() cache={};for player,data in pairs(enemy_data) do local hits=data.hits;local shots=data.shots;local cheat_type=data.cheat_type;local cheat_confidence=data.cheat_confidence;enemy_data[player]={hits=hits,shots=shots,cheat_type=cheat_type,cheat_confidence=cheat_confidence};end end local function on_preset_change() local preset=ui.get(config.presets);apply_preset(preset);end local function on_aim_target(player) if ( not ui.get(config.enabled) or  not player or  not entity.is_alive(player)) then return;end return resolve_player(player);end ui.set_callback(config.presets,on_preset_change);client.set_event_callback("paint",on_paint);client.set_event_callback("player_hurt",on_player_hurt);client.set_event_callback("bullet_impact",on_bullet_impact);client.set_event_callback("player_death",on_player_death);client.set_event_callback("round_start",on_round_start);pcall(function() client.set_event_callback("aim_target",on_aim_target);end);function rgb_to_hex(r,g,b,a) r=r or 255 ;g=g or 255 ;b=b or 255 ;a=a or 255 ;return string.format("%02X%02X%02X%02X",r,g,b,a);end local refs={enabled=ui.reference("AA","Anti-aimbot angles","Enabled"),pitch=ui.reference("AA","Anti-aimbot angles","Pitch"),yaw_base=ui.reference("AA","Anti-aimbot angles","Yaw base"),yaw=ui.reference("AA","Anti-aimbot angles","Yaw"),yaw_jiiter=ui.reference("AA","Anti-aimbot angles","Yaw jitter"),body_yaw=ui.reference("AA","Anti-aimbot angles","Body yaw"),freestanding_body=ui.reference("AA","Anti-aimbot angles","Freestanding Body yaw"),edge_yaw=ui.reference("AA","Anti-aimbot angles","Edge Yaw"),freestanding={ui.reference("AA","Anti-aimbot angles","Freestanding")},roll=ui.reference("AA","Anti-aimbot angles","Roll"),fakeduck=ui.reference("rage","other","duck peek assist"),slide={ui.reference("AA","other","slow motion")},double_tap={ui.reference("RAGE","Aimbot","Double tap")},hide_shots={ui.reference("AA","Other","On shot anti-aim")},min_damage_override={ui.reference("RAGE","Aimbot","Minimum damage override")},peek={ui.reference("RAGE","Other","Quick peek assist")},dmg={ui.reference("RAGE","Aimbot","Minimum damage override")}};local ground_tick=1;local color=function(r,g,b,a) return {r=r or 255 ,g=g or 255 ,b=b or 255 ,a=a or 255 };end;local rec=function(x,y,w,h,radius,color) radius=math.min(x/2 ,y/2 ,radius);local r,g,b,a=unpack(color);renderer.rectangle(x,y + radius ,w,h-(radius * 2) ,r,g,b,a);renderer.rectangle(x + radius ,y,w-(radius * 2) ,radius,r,g,b,a);renderer.rectangle(x + radius ,(y + h) -radius ,w-(radius * 2) ,radius,r,g,b,a);renderer.circle(x + radius ,y + radius ,r,g,b,a,radius,180,0.25);renderer.circle((x-radius) + w ,y + radius ,r,g,b,a,radius,90,0.25);renderer.circle((x-radius) + w ,(y-radius) + h ,r,g,b,a,radius,0,0.25);renderer.circle(x + radius ,(y-radius) + h ,r,g,b,a,radius, -90,0.25);end;local rec_outline=function(x,y,w,h,radius,thickness,color) radius=math.min(w/2 ,h/2 ,radius);local r,g,b,a=unpack(color);if (radius==1) then renderer.rectangle(x,y,w,thickness,r,g,b,a);renderer.rectangle(x,(y + h) -thickness ,w,thickness,r,g,b,a);else renderer.rectangle(x + radius ,y,w-(radius * 2) ,thickness,r,g,b,a);renderer.rectangle(x + radius ,(y + h) -thickness ,w-(radius * 2) ,thickness,r,g,b,a);renderer.rectangle(x,y + radius ,thickness,h-(radius * 2) ,r,g,b,a);renderer.rectangle((x + w) -thickness ,y + radius ,thickness,h-(radius * 2) ,r,g,b,a);renderer.circle_outline(x + radius ,y + radius ,r,g,b,a,radius,180,0.25,thickness);renderer.circle_outline(x + radius ,(y + h) -radius ,r,g,b,a,radius,90,0.25,thickness);renderer.circle_outline((x + w) -radius ,y + radius ,r,g,b,a,radius, -90,0.25,thickness);renderer.circle_outline((x + w) -radius ,(y + h) -radius ,r,g,b,a,radius,0,0.25,thickness);end end;local glow_module=function(x,y,w,h,width,rounding,accent,accent_inner) local thickness=1;local offset=1;local r,g,b,a=ui.get(accentt.accent_color);if accent_inner then rec(x,y,w,h + 1 ,rounding,accent_inner);end for k=0,width do if ((a * ((k/width)^1))>5) then local accent={r,g,b,a * ((k/width)^2) };rec_outline(x + (((k-width) -offset) * thickness) ,y + (((k-width) -offset) * thickness) ,w-(((k-width) -offset) * thickness * 2) ,(h + 1) -(((k-width) -offset) * thickness * 2) ,rounding + (thickness * ((width-k) + offset)) ,thickness,accent);end end end;local lerp=function(a,b,p) return a + ((b-a) * p) ;end;local calculateGradient=function(performingText,selectedColors,animationSpeed,interpolateValue,invertAnimationDirection) local result="";local textLength,colorLength= #performingText,1/( #selectedColors-(interpolateValue or 1.5)) ;local animationSpeed,animationDirection=animationSpeed or 1.5 ,(invertAnimationDirection and 1) or  -1 ;for i=1,textLength do local letterStep=i/textLength ;local globalLength=letterStep/colorLength ;local newIndex=math.ceil(globalLength);local firstColor,secondColor=selectedColors[newIndex],selectedColors[newIndex + 1 ];local calculatedPercentage=math.abs(math.cos((globals.curtime() * animationSpeed) + (letterStep * animationDirection * 2.5) ));local r,g,b,a=lerp(firstColor.r,secondColor.r,calculatedPercentage),lerp(firstColor.g,secondColor.g,calculatedPercentage),lerp(firstColor.b,secondColor.b,calculatedPercentage),lerp(firstColor.a,secondColor.a,calculatedPercentage);result=result   .. "\a"   .. rgb_to_hex(r,g,b,a)   .. performingText:sub(i,i) ;end return result;end;local antiaimstates={conditions={"Stand","Move","Air","Air-crouch","Crouch","Slowwalk"},conditions_small={" ","  ","   ","    ","     ","      "},get_state_name=function(speed) if  not entity.is_alive(entity.get_local_player()) then return;end local flags=entity.get_prop(entity.get_local_player(),"m_fFlags");local land=bit.band(flags,bit.lshift(1,0))~=0 ;if (land==true) then ground_tick=ground_tick + 1 ;else ground_tick=0;end if (bit.band(flags,1)==1) then if (ground_tick<10) then if (bit.band(flags,4)==4) then return "Air-c";else return "Air";end end if ((bit.band(flags,4)==4) or ui.get(refs.fakeduck)) then return "Crouch";elseif (speed<=3) then return "Stand";elseif ui.get(refs.slide[2]) then return "Slowwalk";else return "Move";end elseif (bit.band(flags,1)==0) then if (bit.band(flags,4)==4) then return "Air-c";else return "Air";end end end};local visuals={_icon_texture=nil};function get_velocity() local player=entity.get_local_player();if  not player then return 0;end local vx,vy=entity.get_prop(player,"m_vecVelocity");if ( not vx or  not vy) then return 0;end return math.floor(math.sqrt((vx * vx) + (vy * vy) ));end local icon=renderer.load_svg([[
    <svg width="1080" height="1080" xmlns="http://www.w3.org/2000/svg">
    <g transform="translate(540,540) rotate(45) translate(-400,-400)">
      <polygon fill="white" points="
        0,0 160,0 160,320 320,320 320,0 800,0 800,160 480,160 480,320 800,320 
        800,800 640,800 640,480 480,480 480,800 0,800 0,640 320,640 320,480 0,480 0,0"/>
    </g>
  </svg>
]],1080,1080);local scoped_anim=0;local ind_anim={0,0,0,0,0,0};local createindicators=function() if (ui.get(indicator_table.toggle)==false) then return;end local lp=entity.get_local_player();local screen={client.screen_size()};local r,g,b,a=ui.get(accentt.accent_color);screen.x=screen[1];screen.y=screen[2];local x,y=screen.x/2 ,screen.y/2 ;local offset=18;local binds={{name="peek",color=color(255,255,255),bool=ui.get(refs.peek[2]),offset=24},{name="min",color=color(255,255,255),bool=ui.get(refs.min_damage_override[2]),offset=20},{name="dt",color=color(255,255,255),bool=ui.get(refs.double_tap[2]),offset=12},{name="os",color=color(255,255,255),bool=ui.get(refs.hide_shots[2]),offset=12},{name="fs",color=color(255,255,255),bool=ui.get(refs.freestanding[2]) and ui.get(refs.freestanding[1]) ,offset=12},{name="fd",color=color(255,255,255),bool=ui.get(refs.fakeduck),offset=12}};if (lp==nil) then return;end if (entity.is_alive(lp)==false) then return;end local state_name=antiaimstates.get_state_name(get_velocity());local scoped=((entity.get_prop(entity.get_local_player(),"m_bIsScoped")==1) and true) or false ;scoped_anim=lerp(scoped_anim,(scoped and 1) or 0 ,17 * globals.frametime() );local name_offset=renderer.measure_text("-",("husenhook"):upper());local gradient_text=calculateGradient(("hook"):upper(),{color(255,255,255),color(r,g,b)},2);renderer.text(x + (scoped_anim * ((name_offset/2) + 2)) ,y + offset ,255,255,255,255,"c-",0,"HUSEN"   .. gradient_text );offset=offset + 9 ;local state_offset={stand=14,move=14,air=7,["air-c"]=12,crouch=17,slow=11};renderer.text(x + (scoped_anim * ((renderer.measure_text("-",state_name:upper())/2) + 2)) ,y + offset ,200,200,200,math.floor(math.pulse()),"c-",0,state_name:upper());offset=offset + 9 ;for i=1, #binds do local name_offset=renderer.measure_text("-",binds[i].name:upper());ind_anim[i]=lerp(ind_anim[i],(binds[i].bool and 1) or 0 ,10 * globals.frametime() );renderer.text(x + (scoped_anim * ((name_offset/2) + 2)) ,y + offset ,200,200,200,math.floor(ind_anim[i] * 200 ),"c-",0,binds[i].name:upper());offset=offset + ((binds[i].bool and 9) or 0) ;end end;client.set_event_callback("paint",function() createindicators();end);local dragging_fn=function(name,base_x,base_y) return (function() local a={};local b,c,d,e,f,g,h,i,j,k,l,m,n,o;local p={__index={drag=function(self,...) local q,r=self:get();local s,t=a.drag(q,r,...);if ((q~=s) or (r~=t)) then self:set(s,t);end return s,t;end,set=function(self,q,r) local j,k=client.screen_size();ui.set(self.x_reference,(q/j) * self.res );ui.set(self.y_reference,(r/k) * self.res );end,get=function(self) local j,k=client.screen_size();return (ui.get(self.x_reference)/self.res) * j ,(ui.get(self.y_reference)/self.res) * k ;end}};a.new=function(u,v,w,x) x=x or 10000 ;local j,k=client.screen_size();local y=ui.new_slider("LUA","A",u   .. " window position" ,0,x,(v/j) * x );local z=ui.new_slider("LUA","A","\n"   .. u   .. " window position y" ,0,x,(w/k) * x );ui.set_visible(y,false);ui.set_visible(z,false);return setmetatable({name=u,x_reference=y,y_reference=z,res=x},p);end;a.drag=function(q,r,A,B,C,D,E) if (globals.framecount()~=b) then c=ui.is_menu_open();f,g=d,e;d,e=ui.mouse_position();i=h;h=client.key_state(1)==true ;m=l;l={};o=n;n=false;j,k=client.screen_size();end if (c and (i~=nil)) then if (( not i or o) and h and (f>q) and (g>r) and (f<(q + A)) and (g<(r + B))) then n=true;q,r=(q + d) -f ,(r + e) -g ;if  not D then q=math.max(0,math.min(j-A ,q));r=math.max(0,math.min(k-B ,r));end end end table.insert(l,{q,r,A,B});return q,r,A,B;end;return a;end)().new(name,base_x,base_y);end;local dragging_DEBUG=dragging_fn("Debug box",10,400);local renderdebugbox=function(e) if  not ui.get(debugbox.debugtoggle) then return;end if  not entity.is_alive(lp()) then return;end local local_player=entity.get_local_player();local x,y=dragging_DEBUG:get();local r,g,b,a=ui.get(accentt.accent_color);if (visuals._icon_texture==nil) then visuals._icon_texture=renderer.load_svg(icon_svg,16,16);end if visuals._icon_texture then renderer.texture(visuals._icon_texture,x + 5 ,y + 5 ,16,16,r,g,b,a);end local player_weapon=entity.get_classname(entity.get_player_weapon(local_player));local ping=tostring(math.floor((client.latency() * 1000) + 0.5 ));local bodyYaw=math.floor((entity.get_prop(local_player,"m_flPoseParameter",11) * 120) -60 );local side=((bodyYaw>10) and "right") or "left" ;local state=antiaimstates.get_state_name(get_velocity());glow_module(x,y,135,80,14,6,{r,g,b,a-165 },{13,13,13,200});renderer.texture(icon,x + 5 ,y + 5 ,16,16,r,g,b,a,"f");local gradient_text=calculateGradient("husenhook ~ debug",{color(255,255,255),color(r,g,b)},2);renderer.text(x + 25 ,y + 6 ,255,255,255,255,"",nil,gradient_text);renderer.text(x + 7 ,y + 24 ,255,255,255,255,"",nil,"weapon: "   .. (player_weapon:lower():gsub("hkp2000","usp-s"):gsub("cdeagle","deagle"):gsub("cweapon",""):gsub("cknife","knife"):gsub("cak47","ak47"):gsub("mag7","swag7"):gsub("sawedoff","sawed off"):gsub("ssg08","scout"):gsub("galilar","galil"):gsub("taser","zeus"):gsub("cmolotovgrenade","molly"):gsub("cdecoygrenade","decoy"):gsub("cflashbang","flashbang"):gsub("chegrenade","he"):gsub("csmokegrenade","smoke"):gsub("elite","dualies")) );renderer.text(x + 6 ,y + 37 ,255,255,255,255,"",nil,"side: "   .. side   .. " ("   .. bodyYaw   .. ")" );renderer.text(x + 6 ,y + 50 ,255,255,255,255,"",nil,"state: "   .. state:lower() );renderer.text(x + 6 ,y + 62 ,255,255,255,255,"",nil,"ping: "   .. ping );dragging_DEBUG:drag(135,80);end;client.set_event_callback("paint",function() renderdebugbox();end);function update_accent_label() local r,g,b,a=ui.get(accentt.accent_color);local hex=rgb_to_hex(r,g,b);local text="\a"   .. hex   .. "Accent \aFFFFFFFFColor" ;ui.set(accentt.accent_label,text);end update_accent_label();ui.set_callback(accentt.accent_color,update_accent_label);apply_preset(ui.get(config.presets));ui.set_callback(buybot.enable,update_visibility);ui.set_callback(buybot.grenades,grenade_limit_callback);client.set_event_callback("round_prestart",on_round_prestart);local alpha=255;local introstate="yes";local svg_data=[[
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
width="1080px" height="1080px" viewBox="0 0 500 500" xml:space="preserve">
<path fill="none" stroke="white" stroke-width="18" d="M250.001,12.588C381.12,12.59,487.41,118.88,487.41,249.999
c0.003,131.12-106.29,237.411-237.409,237.411C118.883,487.411,12.59,381.118,12.589,250
C12.59,118.881,118.883,12.588,250.001,12.588z"/>
<path fill="none" stroke="white" stroke-width="18" d="M342.56,250c-0.002,51.118-41.443,92.556-92.559,92.558
c-51.121,0.002-92.56-41.439-92.56-92.559c0-51.118,41.441-92.558,92.559-92.558C301.119,157.443,342.56,198.879,342.56,250z"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250L201.048,69.047c0,0,24.476-7.736,48.952-6.546v-49.97"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250L117.13,117.766c0,0,17.329-18.938,39.121-30.145l-24.985-43.275"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250L68.814,201.917c0,0,5.539-25.065,18.807-45.666l-43.275-24.985"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250L69.046,298.953c0,0-7.735-24.479-6.546-48.953H12.531"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250L117.765,382.87c0,0-18.936-17.329-30.144-39.121l-43.274,24.985"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l-48.083,181.187c0,0-25.064-5.538-45.666-18.808l-24.984,43.275"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l48.951,180.953c0,0-24.476,7.736-48.951,6.546l0.001,49.97"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l132.87,132.234c0,0-17.328,18.938-39.12,30.145l24.985,43.275"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l181.187,48.083c0,0-5.538,25.065-18.808,45.666l43.276,24.985"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l180.953-48.951c0,0,7.736,24.474,6.546,48.951l49.971,0"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l132.234-132.87c0,0,18.938,17.328,30.145,39.121l43.276-24.986"/>
<path fill="none" stroke="white" stroke-width="18" d="M250,250l48.083-181.186c0,0,25.065,5.538,45.667,18.807l24.984-43.275"/>
</svg>
]];local svg_texture=renderer.load_svg(svg_data,200,200);client.exec("play ambient/weather/thunder3.wav");client.set_event_callback("paint_ui",function() local screen_w,screen_h=client.screen_size();local r,g,b,a=ui.get(accentt.accent_color);if (introstate=="yes") then alpha=lerp(alpha,0,globals.frametime() * 1.5 );local fade_alpha=math.floor(alpha);renderer.rectangle(0,0,screen_w,screen_h,20,20,20,fade_alpha);local svg_size=200;local svg_x=(screen_w/2) -(svg_size/2) ;local svg_y=((screen_h/2) -(svg_size/2)) -150 ;renderer.texture(svg_texture,svg_x,svg_y,svg_size,svg_size,r,g,b,fade_alpha);renderer.text(screen_w/2 ,screen_h/2 ,r,g,b,fade_alpha,"cd+",0,"husenhook");if (fade_alpha<1) then introstate="no";end end end); end
